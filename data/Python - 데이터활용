operator 연산자

	실행 우선순위

		()	**	( *   /   % )	( +   - )

	arithmetic : 산술연산자

		덧셈 + , 뺄셈 - , 곱셈 * , 나눗셈 /

		제곱 ** , 몫 // , 나머지 %

	assignment : 할당연산자

		= , += , -= , *= , /=

		예 ) a += b -> a = a + b

	comparison : 비교연산자

		== , < , > , <= , >=

	logical : 논리연산자

		and , or , not

	membership : 포함연산자 ( look up : 포함여부를 확인하다 )

		in , not in

	sequence 정보 연산자

		concatenation : 연쇄 연산자 / +
		Repetition : 반복 연산자 / *

index : 정보들의 주소값 ( 색인 ) / sequence 자료용

	범위 : 0 ~ n / -n ~ -1
	변수[ i ] : i 주소값의 정보
	변수[ i : j ] : i ~ ( j - 1 ) 사이의 정보 ( 비어있으면, 각 끝점 )

slice : 필요한 구간의 정보에 대한 index 값을 지정하여 따로 추출 / sequence 자료용

	기본적으로 인덱싱에서의 index 지정방식과 같음
	시작점, 종료점, 건너뛰기값을 설정하여 사용
	list [ 첫값 : 끝값 : n ] 를 하면 ( n - 1 ) 칸씩 건너뛰고 값 지정

escape : 기호를 문법에서 벗어나게 하는 방법

	기호앞에 ' \ ' 를 붙여 사용한다.

	자주 쓰이는 escape code

	\n	문자열 안에서 줄을 바꿀 때 사용
	\t	문자열 사이에 탭 간격을 줄 때 사용
	\\	문자 \를 그대로 표현할 때 사용
	\'	작은따옴표(')를 그대로 표현할 때 사용
	\"	큰따옴표(")를 그대로 표현할 때 사용

docstring : 줄바꿈있는 문자를 그대로 표시

	" 이나 ' 를 3개 사용

format : 여러 위치에 이름, 값을 지정하여 긴 string 에 정보를 주입

	% 방식 : 위치지정을 %로 하고, 값지정을 %( 값 ) [ 밑의 {} 포맷팅에 비해 느려서, 자주 사용하진 않음 ]

	함수 방식 : {} 로 위치를 지정하고, 문자열 끝에 .format ( 값 ) 으로 값을 지정
	     +
	f 문자열 방식 : 문자열 앞에 f 를 붙여서 사용 / 변수값 참조 가능 ( literal string interpolation )

		아래의 기능들을 사용할때, 표현식 앞에 : 를 붙여야한다. ( {} 에 내용을 적지 않아도 가능 )

		정렬 : () 안의 표현식을 사용. n 의 값에 들어온 숫자값대로 자릿수를 맞춤.
			왼쪽 ( <n ) : 치환되는 값을 왼쪽으로
			오른쪽 ( >n ) : 치환되는 값을 오른쪽으로
			가운데 ( ^n ) : 치환되는 값을 가운데로

			표현식 앞에 기호를 써주면 여백 ( 기본값 ) 대신 지정한 기호로 자릿수를 채워줌

				예 )	"{0:>5}".format("hi") => '   hi'
					"{0:!>5}".format("hi") => '!!!hi'

		소수점 표현 : ( .n ) 의 표현식을 사용. n 의 값에 들어온 숫자값 대로 소수점 자릿수를 표현.
					. 앞에 숫자를 넣으면, 숫자값대로 자릿수를 맞춤 / 표현식 앞에 기호를 써주면 여백 ( 기본값 ) 대신 지정한 기호로 자릿수를 채워줌


set ( ) : container, dictionary 자료형을 set 형태로 변환 ( dictionary 를 변환하면, key 값만 인식 )

	set 자료형에 대한 함수 [ 기호( &, | , - ) 를 쓰지 않으면, 우항에 오는 비교대상이 container, dictionary 여도 작동함 ]
		intersection : & / 교집합 
		union : | / 합집합
		difference : - / 차집합

set 자료형 메소드 ( set 로 표현 )
set.add(값) : 값 1개 추가
set.update(list) : 값 여러개 추가 ( list 에 담아서 )
set.remove(값) : 값 삭제 ( 여러개는 불가능 )

sequence 자료형 메소드 ( sqc 로 표현 )
len(sqc) : element 개수
sqc.count(값) : 값의 개수
sqc.find(값) : 값이 처음으로 나온 index 값
"값".join(sqc) : sqc 사이에 값을 삽입

자주 사용되는 문자형 메소드 ( str 로 표현 )
str.upper : 대문자로 변환
str.lower : 소문자로 변환
str.strip : 여백을 모두 지움 ( strip 앞에 l 이나 r 을 붙여, 왼쪽이나 오른쪽으로 지정 )
str.replace( i , j ) : i 에 바뀔부분, j 에 바꿀내용을 지정
str.split() : () 안의 값을 기준으로 str 의 내용을 쪼개어, 요소별로 list 에 넣음

list 자료형 메소드 ( lis 으로 표현 )
lis[ index 값 ] = 값 : index 값 위치의 값 변경
del lis[ index 값 ] : index 값 위치의 값 삭제
lis.append(값) : list 마지막에 값을 추가
lis.sort() : 요소들을 순서대로 정렬해줌
lis.reverse() : 요소의 순서를 뒤집음
lis.index(값) : 값의 index 값 반환
lis.insert( a, b ) : a 위치에 b 를 삽입
lis.remow(값) : 가장 처음에 있는 값을 삭제
lis.pop() : 맨 마지막에 있는 값을 출력하고 삭제
lis.count(값) : 값이 몇 개 있는지 출력
lis.extend( list ) : lis + list

dictionary 자료형 메소드 ( dict 로 표현 )
dict[ key ] = value : 정보 추가
del dict[ key ] : key 에 대한 정보 삭제
dict.clear() : 딕셔너리 모두 삭제
dict.get(key) : key 값의 value 반환
key in dict : key 포함여부 -> boolean 데이터형 반환
dict.keys() : dict_keys([ key list ]) 라는 객체를 리턴해줌 ( key list )
dict.values() : dict_values([ value list ]) 라는 객체를 리턴해줌 ( value list )
dict.items() : dict_items([ item list ]) 라는 객체를 리턴해줌 ( item list ) - keyvaluepair

[파이썬 3.0 이후 버전의 keys 함수, 어떻게 달라졌나?]

파이썬 2.7 버전까지는 a.keys() 함수를 호출할 때 반환 값으로 dict_keys가 아닌 리스트를 돌려준다.
리스트를 돌려주기 위해서는 메모리 낭비가 발생하는데 파이썬 3.0 이후 버전에서는 이러한 메모리 낭비를 줄이기 위해 dict_keys 객체를 돌려준다.
다음에 소개할 dict_values, dict_items 역시 파이썬 3.0 이후 버전에서 추가된 것들이다.
만약 3.0 이후 버전에서 반환 값으로 리스트가 필요한 경우에는 list(a.keys())를 사용하면 된다.
dict_keys, dict_values, dict_items 등은 리스트로 변환하지 않더라도 기본적인 반복(iterate) 구문(예: for문)을 실행할 수 있다.
dict_ 객체는 list 고유의 append, insert, pop, remove, sort 함수는 수행할 수 없다.
list(a.keys()) -> dict_ 객체를 list 로 변환해줌