중요쓰!

1. git/ GitHub 이란? VCS(Version Control System)이란?
2. repository 생성 + 관련 명령어(git init, git add remote, git remote -v)
3. local repository / remote repository
4. git clone vs. git pull 개념 및 차이점
5. branch의 개념 + 관련 명령어(branch 생성, branch 이동, branch 제거)
6. git staging 설명 + 관련 명령어(add, commit, push)
7. conflict는 왜 발생하는가? 어떻게 해결하는가?



우코드 제공 참고자료!
 
- 깃 과 깃허브 영상 [https://vimeo.com/400216189](https://vimeo.com/400216189) (비번: wecode!)
- [https://stackoverflow.com/c/wecode/questions/299](https://stackoverflow.com/c/wecode/questions/299)
- [블로그(4기 박준규) 🇰🇷](https://velog.io/@devzunky/wecode-TIL-6%EC%9D%BC%EC%B0%A8-Git-slk1d7jeps)
- [Learn Git Branching 🇺🇸](https://learngitbranching.js.org/?locale=ko)
- [git 간편 안내서 🇰🇷](https://rogerdudler.github.io/git-guide/index.ko.html)
- [초심자를 위한 Github 협업 튜토리얼 🇰🇷](https://milooy.wordpress.com/2017/06/21/working-together-with-github-tutorial/?fbclid=IwAR00NEyVsOBMWReI6JRto53df0bvRpgPux8GQxy28D_NQ7OPrPKVFs2k6lk)


세션!

- **Preview**
    - 주어진 학습 자료를 활용하여 **<What You Will Learn>** 주제에 대해 미리 학습합니다.
- **실습1. Basic Git Flow (25min)**
    - 사전 구성된 조원들과 모입니다.
    - 실습을 통해 개념을 적용하고 Git 기본 순서와 관련 명령어를 직접 익혀봅니다.

    1. wecode github에 들어가 각자 해당 repository 클론 받기 
    2. 자신의 이름을 딴 branch 생성하기 
    3. 미션 수행 
    4. git add .
    5. commit 메세지 남기기 
    6. 해당 branch remote master branch에 푸시 
    7. merge 

- **실습2. Conflict Resolved💥 (40min)**
    - 실습1과 같은 팀으로 이어서 진행이 됩니다.
    - 충돌이 나는 상황을 발생시켜 왜 발생하는지, 어떻게 해결하는지에 대해 배웁니다.

    1. conflict 발생
    2. conflict 해결
    3. 다시 add, commit, push
    4. github에서 지금까지의 활동 내역 확인 (commit 내역, branch, closed PR 확인)

- **Wrap-up (20min)**
    - 멘토 설명
    - Q&A