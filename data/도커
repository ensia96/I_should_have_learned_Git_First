도커

가상화 기술 virtual machine

컨테이너 = img 에 대한 번역을 실시간으로 동작

os 커널 환경구성을 img 화 시켜서 가상의 환경을 구축

서버리스 배포

k8s 쿠버네티스?

데브옵스 기술

docker ps
#(실행중인 컨테이너를 보여주는 커맨드) 
docker ps -a
#(실행이 종료된 것을 포함해서 모든 컨테이너를 보는 커맨드 및 옵션)
docker images
#(생성된 혹은 다운로드 된 이미지를 보여주는 커맨드)
docker images -a
#(모든 이미지를 보여주는 커맨드 및 옵션)

docker login 로그인하기!

docker build 빌드하기!

```bash
docker

docker ps
#(실행중인 컨테이너를 보여주는 커맨드) 
docker ps -a
#(실행이 종료된 것을 포함해서 모든 컨테이너를 보는 커맨드 및 옵션)
docker images
#(생성된 혹은 다운로드 된 이미지를 보여주는 커맨드)
docker images -a
#(모든 이미지를 보여주는 커맨드 및 옵션)

```

- 도커 이미지를 생성하기 위한 첫번째 기초! Dockerfile

```bash
#./Dockerfile
FROM python:3 #기반이 될 이미지

# 작업디렉토리(default)설정
WORKDIR /usr/src/app 

## Install packages
#현재 패키지 설치 정보를 도커 이미지에 복사
COPY requirements.txt ./ 
#설치정보를 읽어 들여서 패키지를 설치
RUN pip install -r requirements.txt

## Copy all src files
#현재경로에 존재하는 모든 소스파일을 이미지에 복사
COPY . . 

## Run the application on the port 8080
#8000번 포트를 외부에 개방하도록 설정
EXPOSE 8000   

#CMD ["python", "./setup.py", "runserver", "--host=0.0.0.0", "-p 8080"]
#gunicorn을 사용해서 서버를 실행
CMD ["gunicorn", "--bind", "0.0.0.0:8000", "example.wsgi:application"]  

```

- 도커파일을 이용해 이미지 빌드 하기

```bash
docker build -t '도커허브에 가입한 계정명'/'이미지명(프로젝트명 권장)':'버전' .
ex) docker build -t wecode/wecodeproject:0.1.0 .
```

- 빌드된 이미지를 실행해보기

```python
docker run --name '컨테이너 명' -d'데몬으로 실행하기 위한 옵션' -p '호스트 포트':'컨테이너 포트' '이미지명'
ex) docker run --name wecode01 -d -p 8000:8000 wecode/wecodeproject:0.1.0
```

- 빌드된 이미지에 이상이 있을 경우, docker ps -a 명령어로 살펴봤을떄, status가 exited 됐을것이다.
이는 서버가 실행되다 오류가 발생홰서 문제가 되는 경우가 많다. 그렇다면 다음과 같이 실행해서 문제를 확인해 볼 수 있다.

```python
docker run -it wecode/wecodeproject:0.1.0 /bin/bash
#위의 명령어를 실행하면 이미지를 기반으로 바로 컨테이너를 실행하면서 접속한다.
#process 등 여러가지를 살펴보면서 현재 서버에 어떤 문제가 있는지 알 수 있다. 하지만 수정은 컨테이너에서 하는게 아닌 이미지를 다시 빌드 해야한다.
```

- 이미지 전부 삭제하는 명령어

```python
docker rmi $(docker images -q)
#ubuntu
sudo docker rmi $(sudo docker images -q)
```

- 컨테이너 전부 삭제하는 명령어

```python
docker rm $(docker ps -a -q)
```


도커의 원리?
https://www.44bits.io/ko/post/how-docker-image-work

도커 푸시
http://pyrasis.com/book/DockerForTheReallyImpatient/Chapter13/02

도커 간단 명령어 정리
https://brunch.co.kr/@hopeless/10

도커?
https://subicura.com/2017/01/19/docker-guide-for-beginners-1.html

도커 노션
https://www.notion.so/Docker-3a4c41688cd749659a572e8aa4fa3f76

위코드 도커
https://stackoverflow.com/c/wecode/questions/271
https://stackoverflow.com/c/wecode/search?q=docker&mixed=0

ec2 에서는 무조건 sudo!

도커에서 문제가 생기면!
https://docs.docker.com/engine/reference/commandline/login/#credentials-store
https://github.com/occidere/TIL/issues/116